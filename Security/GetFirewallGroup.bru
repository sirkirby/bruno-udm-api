meta {
  name: GetFirewallGroup
  type: http
  seq: 7
}

get {
  url: https://{{udm-ip}}/proxy/network/api/s/default/rest/firewallgroup
  body: none
  auth: none
}

headers {
  x-csrf-token: {{csrf-token}}
  Cookie: {{cookie}}
}

vars:pre-request {
  csrf-token: bru.getEnvVar("csrf-token")
  cookie: bru.getEnvVar("cookie")
}

tests {
  /**
   * Tests for Firewall Group API endpoint
   * These tests validate the structure and format of the response
   * without making assumptions about specific data values
   */
  
  // Basic response validation
  test("should return successful response", function() {
      expect(res.status).to.equal(200);
  });
  
  test("response headers should indicate JSON content", function() {
      expect(res.headers['content-type']).to.include('application/json');
  });
  
  // Schema validation
  test("response should have required structure", function() {
      const body = res.body;
      
      expect(body).to.have.property('meta').that.is.an('object');
      expect(body).to.have.property('data').that.is.an('array');
      expect(body.meta).to.have.property('rc').equal('ok');
  });
  
  // Generic group validation
  test("each firewall group should have required properties and correct types", function() {
      const body = res.body;
      const validGroupTypes = ['address-group', 'port-group', 'ipv6-address-group'];
      
      body.data.forEach((group, index) => {
          // Required properties
          expect(group, `Group at index ${index}`).to.have.property('group_members').that.is.an('array');
          expect(group, `Group at index ${index}`).to.have.property('name').that.is.a('string');
          expect(group, `Group at index ${index}`).to.have.property('site_id').that.is.a('string');
          expect(group, `Group at index ${index}`).to.have.property('_id').that.is.a('string');
          expect(group, `Group at index ${index}`).to.have.property('group_type').that.is.a('string');
  
          // Format validation
          expect(group.site_id, `Invalid site_id format for group ${group.name}`)
              .to.match(/^[0-9a-f]{24}$/);
          expect(group._id, `Invalid _id format for group ${group.name}`)
              .to.match(/^[0-9a-f]{24}$/);
          expect(validGroupTypes, `Invalid group_type "${group.group_type}" for group ${group.name}`)
              .to.include(group.group_type);
      });
  });
  
  // Member format validation based on group type
  test("all group members should have valid format based on group type", function() {
      const body = res.body;
      const ipv4Regex = /^(\d{1,3}\.){3}\d{1,3}(\/\d{1,2})?$/;
      const ipv6Regex = /^([0-9a-fA-F:]+)(\/\d{1,3})?$/;
      const portRegex = /^\d+$/;
      
      body.data.forEach(group => {
          group.group_members.forEach(member => {
              switch(group.group_type) {
                  case 'port-group':
                      expect(member, `Invalid port format in group ${group.name}: ${member}`)
                          .to.match(portRegex);
                      const port = parseInt(member);
                      expect(port, `Port number out of range in group ${group.name}: ${member}`)
                          .to.be.within(1, 65535);
                      break;
                  
                  case 'address-group':
                      expect(member, `Invalid IPv4 format in group ${group.name}: ${member}`)
                          .to.match(ipv4Regex);
                      if (!member.includes('/')) {
                          const parts = member.split('.');
                          parts.forEach(part => {
                              const num = parseInt(part);
                              expect(num, `Invalid IPv4 component in group ${group.name}: ${member}`)
                                  .to.be.within(0, 255);
                          });
                      } else {
                          const prefix = parseInt(member.split('/')[1]);
                          expect(prefix, `Invalid CIDR prefix in group ${group.name}: ${member}`)
                              .to.be.within(0, 32);
                      }
                      break;
                  
                  case 'ipv6-address-group':
                      expect(member, `Invalid IPv6 format in group ${group.name}: ${member}`)
                          .to.match(ipv6Regex);
                      if (member.includes('/')) {
                          const prefix = parseInt(member.split('/')[1]);
                          expect(prefix, `Invalid IPv6 CIDR prefix in group ${group.name}: ${member}`)
                              .to.be.within(0, 128);
                      }
                      break;
              }
          });
      });
  });
  
  // Data integrity tests
  test("group names should be unique", function() {
      const body = res.body;
      const names = body.data.map(group => group.name);
      const uniqueNames = new Set(names);
      expect(names.length).to.equal(uniqueNames.size, "Duplicate group names found");
  });
  
  // Performance test
  test("response time should be reasonable", function() {
      // Adjust threshold based on your requirements
      const THRESHOLD = 2000; // 2 seconds
      expect(res.responseTime).to.be.below(THRESHOLD);
  });
  
  // Data consistency test
  test("all groups should reference same site_id", function() {
      const body = res.body;
      if (body.data.length > 0) {
          const firstSiteId = body.data[0].site_id;
          body.data.forEach(group => {
              expect(group.site_id).to.equal(firstSiteId, 
                  `Inconsistent site_id found in group ${group.name}`);
          });
      }
  });
}
